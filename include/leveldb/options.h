// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
// DB 内容存储在一组块中，每个块保存一个
//键值对序列。每个块可能在之前被压缩
//存储在一个文件中。以下枚举描述了哪些
//压缩方法（如果有）用于压缩块。
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  //注意：不要更改现有条目的值，因为这些是
  //磁盘上持久格式的一部分。
  kNoCompression = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
//控制数据库行为的选项（传递给 DB::Open）
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  //影响行为的参数

  //比较器用于定义表中键的顺序。
  //默认值：使用字典字节顺序的比较器
  //
  //要求：客户端必须确保提供的比较器
  //这里有相同的名称和命令键*完全*与
  //提供给同一 DB 上先前打开调用的比较器。
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  //如果为true，则如果缺少则创建数据库。
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  //如果为 true，如果数据库已经存在，则会引发错误。
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  //如果为 true，则实现将积极检查
  //正在处理的数据，如果检测到任何数据，将提前停止
  //错误。这可能会产生不可预见的后果：例如，
  //一个数据库条目的损坏可能会导致大量条目
  //变得不可读或整个数据库变得不可打开。
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  //使用指定的对象与环境交互，
  //例如读/写文件，安排后台工作等。
  //默认值：Env::Default()
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  //如果 info_log 为非空 数据库生成的任何内部进度/错误信息都会写入
  // info_log; 如果 info_log 为空，则写到与数据库相同目录的一个文件中。
  Logger* info_log = nullptr;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  //-----
  //影响性能的参数

  //要在内存中建立的数据量（由未排序的日志支持）
  //在磁盘上）在转换为已排序的磁盘文件之前。
  //
  //较大的值会提高性能，尤其是在批量加载期间。
  //最多可以同时在内存中保存两个写缓冲区，
  //所以你可能希望调整这个参数来控制内存使用。
  //另外，更大的写缓冲区会导致更长的恢复时间
  //下次打开数据库时。
  size_t write_buffer_size = 4 * 1024 * 1024;  // 4MB

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  //数据库可以使用的打开文件数。你可能需要
  //如果您的数据库有一个大的工作集（预算
  //每 2MB 工作集打开一个文件）。
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).
  //控制块（用户数据存储在一组块中，并且
  //块是从磁盘读取的单位）。
  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  //如果非空，则为块使用指定的缓存。
  //如果为 null，leveldb 将自动创建并使用 8MB 的内部缓存。
  Cache* block_cache = nullptr;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  //每个块打包的用户数据的近似大小。请注意，
  //这里指定的块大小对应于未压缩的数据。这
  //从磁盘读取的单元的实际大小可能会更小，如果
  //启用压缩。此参数可以动态更改。
  size_t block_size = 4 * 1024;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //密钥增量编码的重启点之间的密钥数量。
  //该参数可以动态更改。大多数客户应该
  //保留这个参数。
  int block_restart_interval = 16;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  // Leveldb 将在此之前将这个字节数写入文件
  //切换到一个新的。
  //大多数客户端应该单独保留这个参数。但是，如果您的
  //文件系统对于更大的文件更有效，你可以
  //考虑增加值。压缩下行时间会更长
  //从而导致更长的延迟/性能问题。
  //增加这个参数的另一个原因可能是当你
  //最初填充一个大型数据库。
  size_t max_file_size = 2 * 1024 * 1024;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  //使用指定的压缩算法压缩块。这
  //参数可以动态改变。
  //
  //默认值：kSnappyCompression，它提供轻量级但快速
  //压缩。
  //
  // kSnappyCompression 在 Intel(R) Core(TM)2 2.4GHz 上的典型速度：
  //~200-500MB/s 压缩
  //~400-800MB/s 解压
  //请注意，这些速度比大多数持久存储的速度要快得多
  //因此通常从不值得切换到 kNoCompression。即使输入数据是
  //不可压缩，kSnappyCompression 实现将
  //有效地检测到，并将切换到未压缩模式。
  CompressionType compression = kSnappyCompression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  //实验：如果为 true，则附加到现有的清单和日志文件
  //当数据库打开时。这可以显着加快打开速度。
  //
  //默认值：当前为 false，但稍后可能会变为 true。
  bool reuse_logs = false;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  //如果非空，则使用指定的过滤策略来减少磁盘读取。
  //许多应用程序将受益于传递结果
  //这里是 NewBloomFilterPolicy()。
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
  ReadOptions() = default;

  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  //如果为真，所有从底层存储读取的数据将被
  //根据相应的校验和进行验证。
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  //为这次迭代读取的数据是否应该缓存在内存中？
  //调用者可能希望将此字段设置为 false 以进行批量扫描。
  bool fill_cache = true;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  //如果“快照”不为空，则从提供的快照开始读取
  //（必须属于正在读取的数据库，并且必须
  //尚未发布）。如果“快照”为空，则使用
  //此读取操作开始时的状态的隐式快照。
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  //如果为 true，则写入将从操作系统中刷新
  //在写入之前缓冲区缓存（通过调用 WritableFile::Sync()）
  //被认为是完整的。如果此标志为真，则写入将更慢。
  //
  //如果这个标志是假的，并且机器崩溃了，一些最近的
  //写入可能会丢失。请注意，如果只是过程
  //崩溃（即机器没有重新启动），不会有任何写入
  //即使同步==假也会丢失。
  //
  //换句话说，一个带有sync==false 的DB 写有类似的
  //作为“write()”系统调用的崩溃语义。一个数据库写
  // sync==true 具有与“write()”类似的崩溃语义
  //系统调用后跟“fsync()”。
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
