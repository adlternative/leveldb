// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"
#include "leveldb/slice.h"

#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 public:
  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {
    /* k 个 哈希函数
     * m [m bit] 过滤器数组的 bit 数
     * n 个 key
     *
     * 当 k = ln2 * (m/n) 时，Bloom Filter 获取最优的准确率。m/n 即 bits per
     * key（集合中每个 key 平均分到的 bit 数）。
     */

    // We intentionally round down to reduce probing cost a little bit
    //我们有意四舍五入以稍微降低探测成本
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const override { return "leveldb.BuiltinBloomFilter2"; }

  /* keys n 个 key 将布隆过滤器 序列化到 dst 中 */
  void CreateFilter(const Slice* keys, int n, std::string* dst) const override {
    // Compute bloom filter size (in both bits and bytes)
    /* n 个 key 所占用的 bits 的位数 */
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    /* 如果这 n 个 key 占用的 bit 数量 < 64 则至少用 64 bit (8B)*/
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8; /* 比特数 */
    bits = bytes * 8;              /* bit 数 对齐 8 */

    const size_t init_size = dst->size();
    /* resize 后面 bytes 大小清 0  */
    dst->resize(init_size + bytes, 0);
    /* 在 dst 最后记录哈希函数的数量 k */
    dst->push_back(static_cast<char>(
        k_));  // Remember # of probes in filter //记住过滤器中的探针数量

    char* array = &(*dst)[init_size];
    /* 对每一个k */
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      //使用双哈希生成哈希值序列。
      /* 没有使用真实的k个哈希函数 */
      // See analysis in [Kirsch,Mitzenmacher 2006].
      /* 计算哈希 */
      uint32_t h = BloomHash(keys[i]);
      /* 计算偏量 */
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        /* 将哈希值序列化到对应的比特位置
         * 就比如 79 % 64 == 15  array[1] |= 1 << (7)
         * array_bit[15] = 1;
         */
        const uint32_t bitpos = h % bits;
        array[bitpos / 8] |= (1 << (bitpos % 8));
        /* 修改哈希（就好像是一个新的哈希函数生成一样） */
        h += delta;
      }
    }
  }
  /* 使用 bloom_filter 的过滤器匹配 key，返回 true 说明可能在，返回 false
   * 说明一定不在  */
  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    //使用编码的k 以便我们可以读取由生成的过滤器
    //使用不同参数创建的布隆过滤器。
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      //保留用于短布隆过滤器的潜在新编码。
      //将其视为匹配项。（可能在）
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      /* 出现 0 则肯定不在 */
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    /* 否则可能在，返回 1 */
    return true;
  }

 private:
  size_t bits_per_key_; /* 每个 key 所占用 的 bit 数量 */
  size_t k_;            /* 哈希函数个数 */
};
}  // namespace

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
